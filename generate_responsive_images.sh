#!/bin/bash

# Check if ImageMagick is installed
if ! command -v magick &> /dev/null
then
    echo "ImageMagick is not installed. Install it to use this script."
    exit 1
fi

# Define the source and output directories
src_dir="src/assets/images/original_images"
output_dir="src/assets/images/responsive_images"

# Remove everything in the output directory (responsive images) if it exists
if [ -d "$output_dir" ]; then
  echo "Cleaning up existing files in ${output_dir}..."
  rm -rf "$output_dir"/*
fi

# Create the output directory if it doesn't exist
mkdir -p "$output_dir"

# Array of target widths for responsive images
declare -a widths=(320 640 1280 1920)

# Function to get file size in KB
get_file_size() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    # For macOS
    stat -f%z "$1"
  else
    # For Linux
    stat --printf="%s" "$1"
  fi
}

# Find all image files in the src_dir (recursively)
# Modify the extensions if you want to support more formats (e.g., png, gif)
find "$src_dir" -type f \( -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.png' \) | while read input_image; do
  # Extract the relative path and file name from the input image
  relative_path=$(dirname "${input_image#"$src_dir/"}")
  base_name=$(basename "$input_image" | cut -d. -f1)
  extension="${input_image##*.}"

  # Create corresponding subdirectory structure in the output directory
  mkdir -p "${output_dir}/${relative_path}"

  # Get the original image size (in bytes)
  original_size=$(get_file_size "$input_image")

  # Loop through each width and generate responsive images
  for width in "${widths[@]}"
  do
    # Generate JPEG image using `magick`
    magick "$input_image" -resize "${width}x" "${output_dir}/${relative_path}/${base_name}-${width}.jpg"
    echo "Created ${output_dir}/${relative_path}/${base_name}-${width}.jpg"

    # Generate WebP image using `magick`
    magick "$input_image" -resize "${width}x" "${output_dir}/${relative_path}/${base_name}-${width}.webp"
    echo "Created ${output_dir}/${relative_path}/${base_name}-${width}.webp"
  done

  # Get the size of the largest version (1920px JPEG)
  largest_image="${output_dir}/${relative_path}/${base_name}-1920.jpg"
  largest_size=$(get_file_size "$largest_image")

  # Print out the original and largest version sizes (in kilobytes)
  echo "$input_image was $(($original_size / 1024)) KB. The largest version of this image is now $(($largest_size / 1024)) KB."
done

echo "All responsive images have been created in ${output_dir}."